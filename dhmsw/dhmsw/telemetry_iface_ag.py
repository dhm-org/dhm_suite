"""
###############################################################################
#    telemetry_iface_ag.py
#
#    IMPORTANT NOTE:  This file is auto-generated by the script: build_telemetry.py
#
#    Generated on:                 2020-03-04 14:04:49
#    Telemetry dictionary filename:  telemetry_dictionary.xml
#    Telemetry dictionary version:   0.1
###############################################################################
"""

import struct
import numpy as np

class Telemetry_Object():
    """
    Telemetry object class
    """
    pass

class Heartbeat_Telemetry(Telemetry_Object):
    """
    Component telemetry class
    """
    class Data():
        """
        Telemetry data class
        """
        def __init__(self):
            """
            Constructor
            """
            self.timestamp = int(0)
            self.status = [int(0), int(0), int(0), int(0), int(0), ]
            self.status_msg = ""

        def __repr__(self):
            """
            Represent function
            """
            print("timestamp: ", self.timestamp)
            print("status: ", self.status)
            print("status_msg: %s"%(self.status_msg.decode()))
            return ""

    def __init__(self):
        """
        Constructor
        """
        self.telemstruct = struct.Struct("i5i256s")
        self.buff = bytearray(struct.calcsize(self.telemstruct.format))
        self.data = self.Data()
    def pack(self):
        """
        Get buffer bytes and place into telemetry structure
        """
        self.telemstruct.pack_into(self.buff, 0, 
                                self.data.timestamp,
                                self.data.status[0], self.data.status[1], self.data.status[2], self.data.status[3], self.data.status[4], 
                                bytes(self.data.status_msg,encoding="utf-8"),
                                )
        return bytes(self.buff)
    def set_values(self, timestamp, status, status_msg, ):
        """
        Set the values
        """

        self.data.timestamp = timestamp
        self.data.status = [int(0),int(0),int(0),int(0),int(0),]
        if not hasattr(status, "__iter__"):
            status = [status]
        if len(status) > 5:
            raise ValueError("status must have no more than 5 items in the list.")
        for i,p in enumerate(status):
            self.data.status[i] = p

        self.data.status_msg = status_msg

    def unpack_from(self, buff, offset=0):
        """
        Unpack data in buffer
        """
        ret = self.telemstruct.unpack_from(buff, offset)
        self.data.timestamp = ret[0]
        self.data.status = list(ret[1:6])
        self.data.status_msg = ret[6]
        return self.data
class Session_Telemetry(Telemetry_Object):
    """
    Component telemetry class
    """
    class Data():
        """
        Telemetry data class
        """
        def __init__(self):
            """
            Constructor
            """
            self.name = ""
            self.description = ""
            self.num_wavelength = int(0)
            self.wavelength = [float(0), float(0), float(0), ]
            self.dx = float(0)
            self.dy = float(0)
            self.crop_fraction = int(0)
            self.rebin_factor = int(0)
            self.lens_focal_length = float(0)
            self.lens_numerical_aperture = float(0)
            self.lens_system_magnification = float(0)
            self.status_msg = ""

        def __repr__(self):
            """
            Represent function
            """
            print("name: %s"%(self.name.decode()))
            print("description: %s"%(self.description.decode()))
            print("num_wavelength: ", self.num_wavelength)
            print("wavelength: ", self.wavelength)
            print("dx: ", self.dx)
            print("dy: ", self.dy)
            print("crop_fraction: ", self.crop_fraction)
            print("rebin_factor: ", self.rebin_factor)
            print("lens_focal_length: ", self.lens_focal_length)
            print("lens_numerical_aperture: ", self.lens_numerical_aperture)
            print("lens_system_magnification: ", self.lens_system_magnification)
            print("status_msg: %s"%(self.status_msg.decode()))
            return ""

    def __init__(self):
        """
        Constructor
        """
        self.telemstruct = struct.Struct("256s256si3fffiifff256s")
        self.buff = bytearray(struct.calcsize(self.telemstruct.format))
        self.data = self.Data()
    def pack(self):
        """
        Get buffer bytes and place into telemetry structure
        """
        self.telemstruct.pack_into(self.buff, 0, 
                                bytes(self.data.name,encoding="utf-8"),
                                bytes(self.data.description,encoding="utf-8"),
                                self.data.num_wavelength,
                                self.data.wavelength[0], self.data.wavelength[1], self.data.wavelength[2], 
                                self.data.dx,
                                self.data.dy,
                                self.data.crop_fraction,
                                self.data.rebin_factor,
                                self.data.lens_focal_length,
                                self.data.lens_numerical_aperture,
                                self.data.lens_system_magnification,
                                bytes(self.data.status_msg,encoding="utf-8"),
                                )
        return bytes(self.buff)
    def set_values(self, name, description, num_wavelength, wavelength, dx, dy, crop_fraction, rebin_factor, lens_focal_length, lens_numerical_aperture, lens_system_magnification, status_msg, ):
        """
        Set the values
        """

        self.data.name = name
        self.data.description = description
        self.data.num_wavelength = num_wavelength
        self.data.wavelength = [float(0),float(0),float(0),]
        if not hasattr(wavelength, "__iter__"):
            wavelength = [wavelength]
        if len(wavelength) > 3:
            raise ValueError("wavelength must have no more than 3 items in the list.")
        for i,p in enumerate(wavelength):
            self.data.wavelength[i] = p

        self.data.dx = dx
        self.data.dy = dy
        self.data.crop_fraction = crop_fraction
        self.data.rebin_factor = rebin_factor
        self.data.lens_focal_length = lens_focal_length
        self.data.lens_numerical_aperture = lens_numerical_aperture
        self.data.lens_system_magnification = lens_system_magnification
        self.data.status_msg = status_msg

    def unpack_from(self, buff, offset=0):
        """
        Unpack data in buffer
        """
        ret = self.telemstruct.unpack_from(buff, offset)
        self.data.name = ret[0]
        self.data.description = ret[1]
        self.data.num_wavelength = ret[2]
        self.data.wavelength = list(ret[3:6])
        self.data.dx = ret[6]
        self.data.dy = ret[7]
        self.data.crop_fraction = ret[8]
        self.data.rebin_factor = ret[9]
        self.data.lens_focal_length = ret[10]
        self.data.lens_numerical_aperture = ret[11]
        self.data.lens_system_magnification = ret[12]
        self.data.status_msg = ret[13]
        return self.data
class Hologram_Telemetry(Telemetry_Object):
    """
    Component telemetry class
    """
    class Data():
        """
        Telemetry data class
        """
        def __init__(self):
            """
            Constructor
            """
            self.num_wavelength = int(0)
            self.wavelength = [float(0), float(0), float(0), ]
            self.dx = float(0)
            self.dy = float(0)
            self.crop_fraction = int(0)
            self.rebin_factor = int(0)
            self.bgd_sub = False
            self.bgd_file = ""

        def __repr__(self):
            """
            Represent function
            """
            print("num_wavelength: ", self.num_wavelength)
            print("wavelength: ", self.wavelength)
            print("dx: ", self.dx)
            print("dy: ", self.dy)
            print("crop_fraction: ", self.crop_fraction)
            print("rebin_factor: ", self.rebin_factor)
            print("bgd_sub: ", self.bgd_sub)
            print("bgd_file: %s"%(self.bgd_file.decode()))
            return ""

    def __init__(self):
        """
        Constructor
        """
        self.telemstruct = struct.Struct("i3fffii?256s")
        self.buff = bytearray(struct.calcsize(self.telemstruct.format))
        self.data = self.Data()
    def pack(self):
        """
        Get buffer bytes and place into telemetry structure
        """
        self.telemstruct.pack_into(self.buff, 0, 
                                self.data.num_wavelength,
                                self.data.wavelength[0], self.data.wavelength[1], self.data.wavelength[2], 
                                self.data.dx,
                                self.data.dy,
                                self.data.crop_fraction,
                                self.data.rebin_factor,
                                self.data.bgd_sub,
                                bytes(self.data.bgd_file,encoding="utf-8"),
                                )
        return bytes(self.buff)
    def set_values(self, num_wavelength, wavelength, dx, dy, crop_fraction, rebin_factor, bgd_sub, bgd_file, ):
        """
        Set the values
        """

        self.data.num_wavelength = num_wavelength
        self.data.wavelength = [float(0),float(0),float(0),]
        if not hasattr(wavelength, "__iter__"):
            wavelength = [wavelength]
        if len(wavelength) > 3:
            raise ValueError("wavelength must have no more than 3 items in the list.")
        for i,p in enumerate(wavelength):
            self.data.wavelength[i] = p

        self.data.dx = dx
        self.data.dy = dy
        self.data.crop_fraction = crop_fraction
        self.data.rebin_factor = rebin_factor
        self.data.bgd_sub = bgd_sub
        self.data.bgd_file = bgd_file

    def unpack_from(self, buff, offset=0):
        """
        Unpack data in buffer
        """
        ret = self.telemstruct.unpack_from(buff, offset)
        self.data.num_wavelength = ret[0]
        self.data.wavelength = list(ret[1:4])
        self.data.dx = ret[4]
        self.data.dy = ret[5]
        self.data.crop_fraction = ret[6]
        self.data.rebin_factor = ret[7]
        self.data.bgd_sub = ret[8]
        self.data.bgd_file = ret[9]
        return self.data
class Reconstruction_Telemetry(Telemetry_Object):
    """
    Component telemetry class
    """
    class Data():
        """
        Telemetry data class
        """
        def __init__(self):
            """
            Constructor
            """
            self.num_propagation_distance = int(0)
            self.propagation_distance = [float(0), float(0), float(0), ]
            self.compute_spectral_peak = False
            self.compute_digital_phase_mask = False
            self.processing_mode = 0
            self.num_chromatic_shift = int(0)
            self.chromatic_shift = [float(0), float(0), float(0), ]
            self.ref_holo_path = ""
            self.ref_holo_enable = False
            self.ref_holo_averaging_sec = float(0)
            self.ref_holo_averaging_enabled = False
            self.phase_unwrapping_enabled = False
            self.phase_unwrapping_algorithm = 0
            self.fitting_mode = 0
            self.fitting_method = 0
            self.fitting_order = float(0)
            self.fitting_apply = False
            self.reset_phase_mask = False
            self.roi_offset_x = int(0)
            self.roi_offset_y = int(0)
            self.roi_size_x = int(0)
            self.roi_size_y = int(0)
            self.store_files = False
            self.center_image = False
            self.center_image_and_tilt = False
            self.center_max_value = False
            self.center_wide_spectrum = False
            self.status_msg = ""

        def __repr__(self):
            """
            Represent function
            """
            print("num_propagation_distance: ", self.num_propagation_distance)
            print("propagation_distance: ", self.propagation_distance)
            print("compute_spectral_peak: ", self.compute_spectral_peak)
            print("compute_digital_phase_mask: ", self.compute_digital_phase_mask)
            print("processing_mode: ", self.processing_mode)
            print("num_chromatic_shift: ", self.num_chromatic_shift)
            print("chromatic_shift: ", self.chromatic_shift)
            print("ref_holo_path: %s"%(self.ref_holo_path.decode()))
            print("ref_holo_enable: ", self.ref_holo_enable)
            print("ref_holo_averaging_sec: ", self.ref_holo_averaging_sec)
            print("ref_holo_averaging_enabled: ", self.ref_holo_averaging_enabled)
            print("phase_unwrapping_enabled: ", self.phase_unwrapping_enabled)
            print("phase_unwrapping_algorithm: ", self.phase_unwrapping_algorithm)
            print("fitting_mode: ", self.fitting_mode)
            print("fitting_method: ", self.fitting_method)
            print("fitting_order: ", self.fitting_order)
            print("fitting_apply: ", self.fitting_apply)
            print("reset_phase_mask: ", self.reset_phase_mask)
            print("roi_offset_x: ", self.roi_offset_x)
            print("roi_offset_y: ", self.roi_offset_y)
            print("roi_size_x: ", self.roi_size_x)
            print("roi_size_y: ", self.roi_size_y)
            print("store_files: ", self.store_files)
            print("center_image: ", self.center_image)
            print("center_image_and_tilt: ", self.center_image_and_tilt)
            print("center_max_value: ", self.center_max_value)
            print("center_wide_spectrum: ", self.center_wide_spectrum)
            print("status_msg: %s"%(self.status_msg.decode()))
            return ""

    def __init__(self):
        """
        Constructor
        """
        self.telemstruct = struct.Struct("i3f??Hi3f256s?f??HHHf??iiii?????256s")
        self.buff = bytearray(struct.calcsize(self.telemstruct.format))
        self.data = self.Data()
    def pack(self):
        """
        Get buffer bytes and place into telemetry structure
        """
        self.telemstruct.pack_into(self.buff, 0, 
                                self.data.num_propagation_distance,
                                self.data.propagation_distance[0], self.data.propagation_distance[1], self.data.propagation_distance[2], 
                                self.data.compute_spectral_peak,
                                self.data.compute_digital_phase_mask,
                                self.data.processing_mode,
                                self.data.num_chromatic_shift,
                                self.data.chromatic_shift[0], self.data.chromatic_shift[1], self.data.chromatic_shift[2], 
                                bytes(self.data.ref_holo_path,encoding="utf-8"),
                                self.data.ref_holo_enable,
                                self.data.ref_holo_averaging_sec,
                                self.data.ref_holo_averaging_enabled,
                                self.data.phase_unwrapping_enabled,
                                self.data.phase_unwrapping_algorithm,
                                self.data.fitting_mode,
                                self.data.fitting_method,
                                self.data.fitting_order,
                                self.data.fitting_apply,
                                self.data.reset_phase_mask,
                                self.data.roi_offset_x,
                                self.data.roi_offset_y,
                                self.data.roi_size_x,
                                self.data.roi_size_y,
                                self.data.store_files,
                                self.data.center_image,
                                self.data.center_image_and_tilt,
                                self.data.center_max_value,
                                self.data.center_wide_spectrum,
                                bytes(self.data.status_msg,encoding="utf-8"),
                                )
        return bytes(self.buff)
    def set_values(self, num_propagation_distance, propagation_distance, compute_spectral_peak, compute_digital_phase_mask, processing_mode, num_chromatic_shift, chromatic_shift, ref_holo_path, ref_holo_enable, ref_holo_averaging_sec, ref_holo_averaging_enabled, phase_unwrapping_enabled, phase_unwrapping_algorithm, fitting_mode, fitting_method, fitting_order, fitting_apply, reset_phase_mask, roi_offset_x, roi_offset_y, roi_size_x, roi_size_y, store_files, center_image, center_image_and_tilt, center_max_value, center_wide_spectrum, status_msg, ):
        """
        Set the values
        """

        self.data.num_propagation_distance = num_propagation_distance
        self.data.propagation_distance = [float(0),float(0),float(0),]
        if not hasattr(propagation_distance, "__iter__"):
            propagation_distance = [propagation_distance]
        if len(propagation_distance) > 3:
            raise ValueError("propagation_distance must have no more than 3 items in the list.")
        for i,p in enumerate(propagation_distance):
            self.data.propagation_distance[i] = p

        self.data.compute_spectral_peak = compute_spectral_peak
        self.data.compute_digital_phase_mask = compute_digital_phase_mask
        self.data.processing_mode = processing_mode
        self.data.num_chromatic_shift = num_chromatic_shift
        self.data.chromatic_shift = [float(0),float(0),float(0),]
        if not hasattr(chromatic_shift, "__iter__"):
            chromatic_shift = [chromatic_shift]
        if len(chromatic_shift) > 3:
            raise ValueError("chromatic_shift must have no more than 3 items in the list.")
        for i,p in enumerate(chromatic_shift):
            self.data.chromatic_shift[i] = p

        self.data.ref_holo_path = ref_holo_path
        self.data.ref_holo_enable = ref_holo_enable
        self.data.ref_holo_averaging_sec = ref_holo_averaging_sec
        self.data.ref_holo_averaging_enabled = ref_holo_averaging_enabled
        self.data.phase_unwrapping_enabled = phase_unwrapping_enabled
        self.data.phase_unwrapping_algorithm = phase_unwrapping_algorithm
        self.data.fitting_mode = fitting_mode
        self.data.fitting_method = fitting_method
        self.data.fitting_order = fitting_order
        self.data.fitting_apply = fitting_apply
        self.data.reset_phase_mask = reset_phase_mask
        self.data.roi_offset_x = roi_offset_x
        self.data.roi_offset_y = roi_offset_y
        self.data.roi_size_x = roi_size_x
        self.data.roi_size_y = roi_size_y
        self.data.store_files = store_files
        self.data.center_image = center_image
        self.data.center_image_and_tilt = center_image_and_tilt
        self.data.center_max_value = center_max_value
        self.data.center_wide_spectrum = center_wide_spectrum
        self.data.status_msg = status_msg

    def unpack_from(self, buff, offset=0):
        """
        Unpack data in buffer
        """
        ret = self.telemstruct.unpack_from(buff, offset)
        self.data.num_propagation_distance = ret[0]
        self.data.propagation_distance = list(ret[1:4])
        self.data.compute_spectral_peak = ret[4]
        self.data.compute_digital_phase_mask = ret[5]
        self.data.processing_mode = ret[6]
        self.data.num_chromatic_shift = ret[7]
        self.data.chromatic_shift = list(ret[8:11])
        self.data.ref_holo_path = ret[11]
        self.data.ref_holo_enable = ret[12]
        self.data.ref_holo_averaging_sec = ret[13]
        self.data.ref_holo_averaging_enabled = ret[14]
        self.data.phase_unwrapping_enabled = ret[15]
        self.data.phase_unwrapping_algorithm = ret[16]
        self.data.fitting_mode = ret[17]
        self.data.fitting_method = ret[18]
        self.data.fitting_order = ret[19]
        self.data.fitting_apply = ret[20]
        self.data.reset_phase_mask = ret[21]
        self.data.roi_offset_x = ret[22]
        self.data.roi_offset_y = ret[23]
        self.data.roi_size_x = ret[24]
        self.data.roi_size_y = ret[25]
        self.data.store_files = ret[26]
        self.data.center_image = ret[27]
        self.data.center_image_and_tilt = ret[28]
        self.data.center_max_value = ret[29]
        self.data.center_wide_spectrum = ret[30]
        self.data.status_msg = ret[31]
        return self.data
class Fouriermask_Telemetry(Telemetry_Object):
    """
    Component telemetry class
    """
    class Data():
        """
        Telemetry data class
        """
        def __init__(self):
            """
            Constructor
            """
            self.num_x_peak = int(0)
            self.x_peak = [int(0), int(0), int(0), ]
            self.num_y_peak = int(0)
            self.y_peak = [int(0), int(0), int(0), ]
            self.mask = [0 for i in range(4194304)]

        def __repr__(self):
            """
            Represent function
            """
            print("num_x_peak: ", self.num_x_peak)
            print("x_peak: ", self.x_peak)
            print("num_y_peak: ", self.num_y_peak)
            print("y_peak: ", self.y_peak)
            print("mask: binary of size 4194304 bytes")
            return ""

    def __init__(self):
        """
        Constructor
        """
        self.telemstruct = struct.Struct("i3ii3i4194304s")
        self.buff = bytearray(struct.calcsize(self.telemstruct.format))
        self.data = self.Data()
    def pack(self):
        """
        Get buffer bytes and place into telemetry structure
        """
        self.telemstruct.pack_into(self.buff, 0, 
                                self.data.num_x_peak,
                                self.data.x_peak[0], self.data.x_peak[1], self.data.x_peak[2], 
                                self.data.num_y_peak,
                                self.data.y_peak[0], self.data.y_peak[1], self.data.y_peak[2], 
                                bytes(self.data.mask[0:4194304]),
                                )
        return bytes(self.buff)
    def set_values(self, num_x_peak, x_peak, num_y_peak, y_peak, mask, ):
        """
        Set the values
        """

        self.data.num_x_peak = num_x_peak
        self.data.x_peak = [int(0),int(0),int(0),]
        if not hasattr(x_peak, "__iter__"):
            x_peak = [x_peak]
        if len(x_peak) > 3:
            raise ValueError("x_peak must have no more than 3 items in the list.")
        for i,p in enumerate(x_peak):
            self.data.x_peak[i] = p

        self.data.num_y_peak = num_y_peak
        self.data.y_peak = [int(0),int(0),int(0),]
        if not hasattr(y_peak, "__iter__"):
            y_peak = [y_peak]
        if len(y_peak) > 3:
            raise ValueError("y_peak must have no more than 3 items in the list.")
        for i,p in enumerate(y_peak):
            self.data.y_peak[i] = p

        self.data.mask = [0 for i in range(4194304)]
        if not hasattr(mask, "__iter__"):
            mask = [mask]
        if len(mask) > 4194304:
            raise ValueError("mask must have no more than 4194304 items in the list.")
        self.data.mask = mask[:]

    def unpack_from(self, buff, offset=0):
        """
        Unpack data in buffer
        """
        ret = self.telemstruct.unpack_from(buff, offset)
        self.data.num_x_peak = ret[0]
        self.data.x_peak = list(ret[1:4])
        self.data.num_y_peak = ret[4]
        self.data.y_peak = list(ret[5:8])
        self.data.mask = ret[8]
        return self.data
class Framesource_Telemetry(Telemetry_Object):
    """
    Component telemetry class
    """
    class Data():
        """
        Telemetry data class
        """
        def __init__(self):
            """
            Constructor
            """
            self.state = 0
            self.mode = ""
            self.file_path = ""
            self.current_file = ""
            self.status_msg = ""

        def __repr__(self):
            """
            Represent function
            """
            print("state: ", self.state)
            print("mode: %s"%(self.mode.decode()))
            print("file_path: %s"%(self.file_path.decode()))
            print("current_file: %s"%(self.current_file.decode()))
            print("status_msg: %s"%(self.status_msg.decode()))
            return ""

    def __init__(self):
        """
        Constructor
        """
        self.telemstruct = struct.Struct("H10s256s256s256s")
        self.buff = bytearray(struct.calcsize(self.telemstruct.format))
        self.data = self.Data()
    def pack(self):
        """
        Get buffer bytes and place into telemetry structure
        """
        self.telemstruct.pack_into(self.buff, 0, 
                                self.data.state,
                                bytes(self.data.mode,encoding="utf-8"),
                                bytes(self.data.file_path,encoding="utf-8"),
                                bytes(self.data.current_file,encoding="utf-8"),
                                bytes(self.data.status_msg,encoding="utf-8"),
                                )
        return bytes(self.buff)
    def set_values(self, state, mode, file_path, current_file, status_msg, ):
        """
        Set the values
        """

        self.data.state = state
        self.data.mode = mode
        self.data.file_path = file_path
        self.data.current_file = current_file
        self.data.status_msg = status_msg

    def unpack_from(self, buff, offset=0):
        """
        Unpack data in buffer
        """
        ret = self.telemstruct.unpack_from(buff, offset)
        self.data.state = ret[0]
        self.data.mode = ret[1]
        self.data.file_path = ret[2]
        self.data.current_file = ret[3]
        self.data.status_msg = ret[4]
        return self.data
class Datalogger_Telemetry(Telemetry_Object):
    """
    Component telemetry class
    """
    class Data():
        """
        Telemetry data class
        """
        def __init__(self):
            """
            Constructor
            """
            self.enabled = False
            self.rootpath = ""
            self.status_msg = ""

        def __repr__(self):
            """
            Represent function
            """
            print("enabled: ", self.enabled)
            print("rootpath: %s"%(self.rootpath.decode()))
            print("status_msg: %s"%(self.status_msg.decode()))
            return ""

    def __init__(self):
        """
        Constructor
        """
        self.telemstruct = struct.Struct("?256s256s")
        self.buff = bytearray(struct.calcsize(self.telemstruct.format))
        self.data = self.Data()
    def pack(self):
        """
        Get buffer bytes and place into telemetry structure
        """
        self.telemstruct.pack_into(self.buff, 0, 
                                self.data.enabled,
                                bytes(self.data.rootpath,encoding="utf-8"),
                                bytes(self.data.status_msg,encoding="utf-8"),
                                )
        return bytes(self.buff)
    def set_values(self, enabled, rootpath, status_msg, ):
        """
        Set the values
        """

        self.data.enabled = enabled
        self.data.rootpath = rootpath
        self.data.status_msg = status_msg

    def unpack_from(self, buff, offset=0):
        """
        Unpack data in buffer
        """
        ret = self.telemstruct.unpack_from(buff, offset)
        self.data.enabled = ret[0]
        self.data.rootpath = ret[1]
        self.data.status_msg = ret[2]
        return self.data
class Guiserver_Telemetry(Telemetry_Object):
    """
    Component telemetry class
    """
    class Data():
        """
        Telemetry data class
        """
        def __init__(self):
            """
            Constructor
            """
            self.ports = [int(0), int(0), int(0), int(0), ]
            self.connection_status = [False, False, False, False, ]
            self.status_msg = ""

        def __repr__(self):
            """
            Represent function
            """
            print("ports: ", self.ports)
            print("connection_status: ", self.connection_status)
            print("status_msg: %s"%(self.status_msg.decode()))
            return ""

    def __init__(self):
        """
        Constructor
        """
        self.telemstruct = struct.Struct("4i4?256s")
        self.buff = bytearray(struct.calcsize(self.telemstruct.format))
        self.data = self.Data()
    def pack(self):
        """
        Get buffer bytes and place into telemetry structure
        """
        self.telemstruct.pack_into(self.buff, 0, 
                                self.data.ports[0], self.data.ports[1], self.data.ports[2], self.data.ports[3], 
                                self.data.connection_status[0], self.data.connection_status[1], self.data.connection_status[2], self.data.connection_status[3], 
                                bytes(self.data.status_msg,encoding="utf-8"),
                                )
        return bytes(self.buff)
    def set_values(self, ports, connection_status, status_msg, ):
        """
        Set the values
        """

        self.data.ports = [int(0),int(0),int(0),int(0),]
        if not hasattr(ports, "__iter__"):
            ports = [ports]
        if len(ports) > 4:
            raise ValueError("ports must have no more than 4 items in the list.")
        for i,p in enumerate(ports):
            self.data.ports[i] = p

        self.data.connection_status = [False,False,False,False,]
        if not hasattr(connection_status, "__iter__"):
            connection_status = [connection_status]
        if len(connection_status) > 4:
            raise ValueError("connection_status must have no more than 4 items in the list.")
        for i,p in enumerate(connection_status):
            self.data.connection_status[i] = p

        self.data.status_msg = status_msg

    def unpack_from(self, buff, offset=0):
        """
        Unpack data in buffer
        """
        ret = self.telemstruct.unpack_from(buff, offset)
        self.data.ports = list(ret[0:4])
        self.data.connection_status = list(ret[4:8])
        self.data.status_msg = ret[8]
        return self.data


